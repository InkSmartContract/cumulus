// Copyright 2022 Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_referenda`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-11, STEPS: `20`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `cob`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("collectives-polkadot-dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/polkadot-parachain
// benchmark
// pallet
// --chain=collectives-polkadot-dev
// --steps=20
// --repeat=1
// --pallet=pallet_referenda
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./parachains/runtimes/collectives/collectives-polkadot/src/weights/pallet_referenda.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_referenda`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
	// Storage: AmbassadorCollective Members (r:1 w:0)
	// Storage: AmbassadorReferenda ReferendumCount (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:0 w:1)
	fn submit() -> Weight {
		// Minimum execution time: 418_000 nanoseconds.
		Weight::from_ref_time(418_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn place_decision_deposit_preparing() -> Weight {
		// Minimum execution time: 597_000 nanoseconds.
		Weight::from_ref_time(597_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:0)
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	fn place_decision_deposit_queued() -> Weight {
		// Minimum execution time: 735_000 nanoseconds.
		Weight::from_ref_time(735_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:0)
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	fn place_decision_deposit_not_queued() -> Weight {
		// Minimum execution time: 797_000 nanoseconds.
		Weight::from_ref_time(797_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn place_decision_deposit_passing() -> Weight {
		// Minimum execution time: 1_163_000 nanoseconds.
		Weight::from_ref_time(1_163_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	fn place_decision_deposit_failing() -> Weight {
		// Minimum execution time: 741_000 nanoseconds.
		Weight::from_ref_time(741_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	fn refund_decision_deposit() -> Weight {
		// Minimum execution time: 441_000 nanoseconds.
		Weight::from_ref_time(441_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	fn refund_submission_deposit() -> Weight {
		// Minimum execution time: 324_000 nanoseconds.
		Weight::from_ref_time(324_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn cancel() -> Weight {
		// Minimum execution time: 646_000 nanoseconds.
		Weight::from_ref_time(646_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: Scheduler Agenda (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: PolkadotXcm SupportedVersion (r:1 w:0)
	// Storage: PolkadotXcm VersionDiscoveryQueue (r:1 w:1)
	// Storage: PolkadotXcm SafeXcmVersion (r:1 w:0)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	fn kill() -> Weight {
		// Minimum execution time: 1_390_000 nanoseconds.
		Weight::from_ref_time(1_390_000_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:0)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:1)
	fn one_fewer_deciding_queue_empty() -> Weight {
		// Minimum execution time: 168_000 nanoseconds.
		Weight::from_ref_time(168_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn one_fewer_deciding_failing() -> Weight {
		// Minimum execution time: 1_311_000 nanoseconds.
		Weight::from_ref_time(1_311_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn one_fewer_deciding_passing() -> Weight {
		// Minimum execution time: 1_154_000 nanoseconds.
		Weight::from_ref_time(1_154_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_requeued_insertion() -> Weight {
		// Minimum execution time: 750_000 nanoseconds.
		Weight::from_ref_time(750_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_requeued_slide() -> Weight {
		// Minimum execution time: 845_000 nanoseconds.
		Weight::from_ref_time(845_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:0)
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_queued() -> Weight {
		// Minimum execution time: 851_000 nanoseconds.
		Weight::from_ref_time(851_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:0)
	// Storage: AmbassadorReferenda TrackQueue (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_not_queued() -> Weight {
		// Minimum execution time: 884_000 nanoseconds.
		Weight::from_ref_time(884_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_no_deposit() -> Weight {
		// Minimum execution time: 472_000 nanoseconds.
		Weight::from_ref_time(472_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_preparing() -> Weight {
		// Minimum execution time: 443_000 nanoseconds.
		Weight::from_ref_time(443_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	fn nudge_referendum_timed_out() -> Weight {
		// Minimum execution time: 321_000 nanoseconds.
		Weight::from_ref_time(321_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_begin_deciding_failing() -> Weight {
		// Minimum execution time: 585_000 nanoseconds.
		Weight::from_ref_time(585_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorReferenda DecidingCount (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_begin_deciding_passing() -> Weight {
		// Minimum execution time: 805_000 nanoseconds.
		Weight::from_ref_time(805_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_begin_confirming() -> Weight {
		// Minimum execution time: 809_000 nanoseconds.
		Weight::from_ref_time(809_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_end_confirming() -> Weight {
		// Minimum execution time: 787_000 nanoseconds.
		Weight::from_ref_time(787_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_continue_not_confirming() -> Weight {
		// Minimum execution time: 852_000 nanoseconds.
		Weight::from_ref_time(852_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_continue_confirming() -> Weight {
		// Minimum execution time: 761_000 nanoseconds.
		Weight::from_ref_time(761_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:2 w:2)
	// Storage: Scheduler Lookup (r:1 w:1)
	fn nudge_referendum_approved() -> Weight {
		// Minimum execution time: 1_194_000 nanoseconds.
		Weight::from_ref_time(1_194_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: AmbassadorReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: AmbassadorCollective MemberCount (r:1 w:0)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn nudge_referendum_rejected() -> Weight {
		// Minimum execution time: 807_000 nanoseconds.
		Weight::from_ref_time(807_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

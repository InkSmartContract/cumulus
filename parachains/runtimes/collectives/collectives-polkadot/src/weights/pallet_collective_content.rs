// Copyright 2022 Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_collective_content`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-06, STEPS: `100`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `cob`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("collectives-polkadot-dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/polkadot-parachain
// benchmark
// pallet
// --chain=collectives-polkadot-dev
// --steps=100
// --repeat=1
// --pallet=pallet_collective_content
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./parachains/runtimes/collectives/collectives-polkadot/src/weights/._pallet_ambassador_content.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_collective_content`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective_content::WeightInfo for WeightInfo<T> {
	/// Storage: AmbassadorContent Charter (r:0 w:1)
	/// Proof: AmbassadorContent Charter (max_values: Some(1), max_size: Some(70), added: 565, mode: MaxEncodedLen)
	fn set_charter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_ref_time(45_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: AmbassadorContent AnnouncementsCount (r:1 w:1)
	/// Proof: AmbassadorContent AnnouncementsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AmbassadorContent NextAnnouncementExpireAt (r:1 w:1)
	/// Proof: AmbassadorContent NextAnnouncementExpireAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AmbassadorContent Announcements (r:0 w:1)
	/// Proof: AmbassadorContent Announcements (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 1]`.
	fn announce(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `998`
		// Minimum execution time: 109_000 nanoseconds.
		Weight::from_parts(111_333_333, 998)
			// Standard Error: 718_749
			.saturating_add(Weight::from_ref_time(13_666_666).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
	/// Storage: AmbassadorContent Announcements (r:1 w:1)
	/// Proof: AmbassadorContent Announcements (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: AmbassadorContent AnnouncementsCount (r:1 w:1)
	/// Proof: AmbassadorContent AnnouncementsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn remove_announcement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3065`
		// Minimum execution time: 186_000 nanoseconds.
		Weight::from_parts(186_000_000, 3065)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: AmbassadorContent NextAnnouncementExpireAt (r:1 w:1)
	/// Proof: AmbassadorContent NextAnnouncementExpireAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AmbassadorContent Announcements (r:100 w:99)
	/// Proof: AmbassadorContent Announcements (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: AmbassadorContent AnnouncementsCount (r:0 w:1)
	/// Proof: AmbassadorContent AnnouncementsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 100]`.
	fn cleanup_announcements(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `130 + x * (97 ±0)`
		//  Estimated: `3065 + x * (2566 ±0)`
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_parts(103_774_653, 3065)
			// Standard Error: 407_952
			.saturating_add(Weight::from_ref_time(102_859_501).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_proof_size(2566).saturating_mul(x.into()))
	}
}

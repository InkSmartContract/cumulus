
//! Autogenerated weights for `pallet_collective_content`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-27, STEPS: `20`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `cob`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("collectives-polkadot-dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/polkadot-parachain
// benchmark
// pallet
// --chain=collectives-polkadot-dev
// --steps=20
// --repeat=1
// --pallet=pallet_collective_content
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./parachains/runtimes/collectives/collectives-polkadot/src/weights/._pallet_ambassador_content.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_collective_content`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective_content::WeightInfo for WeightInfo<T> {
	// Storage: AmbassadorContent Charter (r:0 w:1)
	fn set_charter() -> Weight {
		// Minimum execution time: 210_000 nanoseconds.
		Weight::from_ref_time(210_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AmbassadorContent Announcements (r:1 w:1)
	// Storage: AmbassadorContent NextAnnouncementExpireAt (r:1 w:1)
	/// The range of component `x` is `[0, 1]`.
	fn announce(x: u32, ) -> Weight {
		// Minimum execution time: 253_000 nanoseconds.
		Weight::from_ref_time(269_909_090)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
	// Storage: AmbassadorContent Announcements (r:1 w:1)
	fn remove_announcement() -> Weight {
		// Minimum execution time: 334_000 nanoseconds.
		Weight::from_ref_time(334_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AmbassadorContent NextAnnouncementExpireAt (r:1 w:0)
	// Storage: AmbassadorContent Announcements (r:1 w:1)
	fn cleanup_announcements() -> Weight {
		// Minimum execution time: 2_245_000 nanoseconds.
		Weight::from_ref_time(2_245_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
